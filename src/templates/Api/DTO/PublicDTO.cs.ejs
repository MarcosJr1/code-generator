using Api.DTO;
using Domain.Model;
using System;

namespace Api.Entities.DTO
{
    public class Public<%= props.entityName %>DTO : PublicBaseDTO<<%= props.entityName %>>
    {   <% props.attributtes.forEach(attributte => { %>
        <%= attributte.attrVisibility %> <%= attributte.entityType %> <%= attributte.attrName %> { get; set; }<% }); %>
        
        // TODO: Remove unecessary fields
        // TODO: Verify other entity Relations
        // Model this by each case

        public Public<%= props.entityName %>DTO()
        {
        }

        public Public<%= props.entityName %>DTO(<%= props.entityName %> o) : base(o)
        {
            if (o == null) { return; }

            <% props.attributtes.forEach(attributte => { %>
            <%= attributte.attrName %> = o.<%= attributte.attrName %>;<% }); %>
        }

        public static Public<%= props.entityName %>DTO ConvertModelToDTO(<%= props.entityName %> o)
        {
            if (o == null) { return null; }
            return new Public<%= props.entityName %>DTO(o);
        }

        public static <%= props.entityName %> ConvertDTOToModel(Public<%= props.entityName %>DTO o)
        {
            if (o == null) { return null; }

            <%= props.entityName %> <%= props.entityName %> = new <%= props.entityName %>()
            {
                <% props.attributtes.forEach(attributte => { %>
                <%= attributte.attrName %> = o.<%= attributte.attrName %>,<% }); %>
            };

            <%= props.entityName %> = o.InitializeInstance(<%= props.entityName %>);

            return <%= props.entityName %>;
        }
    }
}
